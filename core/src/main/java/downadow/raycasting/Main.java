/*
   Copyright 2025 downadow

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       https://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package downadow.raycasting;

import com.badlogic.gdx.files.*;
import com.badlogic.gdx.*;
import com.badlogic.gdx.graphics.*;
import com.badlogic.gdx.graphics.g2d.*;
import com.badlogic.gdx.graphics.glutils.*;
import com.badlogic.gdx.utils.*;
import com.badlogic.gdx.utils.viewport.*;
import com.badlogic.gdx.math.*;
import com.badlogic.gdx.Input.*;

public class Main implements ApplicationListener {
    ShapeRenderer shape;
    FitViewport viewport;
    Vector2 touch;
    final int WIDTH = 400, HEIGHT = 225;
    final float FOV = 1.26f; // ~72
    char map[][] = {
        {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
        {'#','.','.','.','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','.','.','.','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','.','.','.','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','.','.','.','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','.','.','.','#'},
        {'#','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','.','.','.','#'},
        {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}
    };
    boolean forward = false, backward = false, left = false, right = false;
    float playerX = 1.0f, playerY = 1.0f, playerAngle = 0.79f;
    
    public void create() {
        touch = new Vector2();
        shape = new ShapeRenderer();
        viewport = new FitViewport(WIDTH, HEIGHT);
        
        Gdx.input.setInputProcessor(new InputAdapter() {
            public boolean keyDown(int key) {
                if(key == Input.Keys.W) {
                    forward = true;
                    return true;
                } else if(key == Input.Keys.S) {
                    backward = true;
                    return true;
                } else if(key == Input.Keys.A) {
                    left = true;
                    return true;
                } else if(key == Input.Keys.D) {
                    right = true;
                    return true;
                } else if(key == Input.Keys.SPACE) {
                    float eX = (float)Math.cos(playerAngle);
                    float eY = (float)Math.sin(playerAngle);
                    
                    float dist = 0.05f;
                    while(map[(int)(playerY + eY * dist)][(int)(playerX + eX * dist)] == '.')
                        dist += 0.05f;
                    
                    if(map[(int)(playerY + eY * dist)][(int)(playerX + eX * dist)] == '@')
                        map[(int)(playerY + eY * dist)][(int)(playerX + eX * dist)] = '.';
                    return true;
                }
                
                return false;
            }
            
            public boolean keyUp(int key) {
                if(key == Input.Keys.W) {
                    forward = false;
                    return true;
                } else if(key == Input.Keys.S) {
                    backward = false;
                    return true;
                } else if(key == Input.Keys.A) {
                    left = false;
                    return true;
                } else if(key == Input.Keys.D) {
                    right = false;
                    return true;
                }
                
                return false;
            }
            
            public boolean touchUp(int x, int y, int ptr, int btn) {
                touch.set(x, y);
                viewport.unproject(touch);
                
                if(touch.x > 0 && touch.x < WIDTH / 2)
                    return keyUp(Input.Keys.W) && keyUp(Input.Keys.S);
                else if(touch.x > WIDTH / 2 && touch.x < WIDTH)
                    return keyUp(Input.Keys.A) && keyUp(Input.Keys.D);
                
                return false;
            }
            
            public boolean touchDown(int x, int y, int ptr, int btn) {
                touch.set(x, y);
                viewport.unproject(touch);
                
                if(touch.x > 0 && touch.x < WIDTH / 2 && touch.y < HEIGHT / 2)
                    return keyDown(Input.Keys.S);
                else if(touch.x > 0 && touch.x < WIDTH / 2)
                    return keyDown(Input.Keys.W);
                else if(touch.x > WIDTH / 2 && touch.x < WIDTH && touch.y > HEIGHT / 2)
                    return keyDown(Input.Keys.SPACE);
                else if(touch.x > WIDTH - WIDTH / 2 / 2 && touch.x < WIDTH)
                    return keyDown(Input.Keys.D);
                else if(touch.x > WIDTH / 2 && touch.x < WIDTH)
                    return keyDown(Input.Keys.A);
                
                return false;
            }
        });
        
        new Thread() {
            public void run() {
                while(true) {
                    try {
                        Thread.sleep(20);
                        
                        if(forward) {
                            final float newX = playerX + (float)Math.cos(playerAngle) * 0.05f;
                            if(map[(int)playerY][(int)newX] == '.') playerX = newX;
                            final float newY = playerY + (float)Math.sin(playerAngle) * 0.05f;
                            if(map[(int)newY][(int)playerX] == '.') playerY = newY;
                        }
                        
                        if(backward) {
                            final float newX = playerX - (float)Math.cos(playerAngle) * 0.05f;
                            if(map[(int)playerY][(int)newX] == '.') playerX = newX;
                            final float newY = playerY - (float)Math.sin(playerAngle) * 0.05f;
                            if(map[(int)newY][(int)playerX] == '.') playerY = newY;
                        }
                        
                        if(left) {
                            playerAngle -= 0.025f;
                            if(playerAngle <= 0.0f) playerAngle = 6.28318f;
                        }
                        
                        if(right) {
                            playerAngle += 0.025f;
                            if(playerAngle > 6.28318f) playerAngle = 0.0001f;
                        }
                    } catch(Exception ex) {}
                }
            }
        }.start();
    }
    
    public void resize(int width, int height) {
        viewport.update(width, height, true);
    }
    
    public void pause() {}

    public void resume() {}

    public void dispose() {}
    
    public void render() {
        ScreenUtils.clear(Color.BLACK);
        viewport.apply();
        viewport.getCamera().update();
        
        shape.setProjectionMatrix(viewport.getCamera().combined);
        shape.begin(ShapeRenderer.ShapeType.Filled);
        
        shape.setColor(new Color(0.1f, 0.1f, 0.1f, 1.0f));
        shape.rect(0, 0, WIDTH, HEIGHT / 2);
        
        // ray casting
        for(int x = 0; x < WIDTH; x++) {
            final float rayAngle = playerAngle - FOV / 2 + x * (FOV / WIDTH);
            final float eX = (float)Math.cos(rayAngle);
            final float eY = (float)Math.sin(rayAngle);
            
            float dist = 0.05f;
            while(map[(int)(playerY + eY * dist)][(int)(playerX + eX * dist)] == '.')
                dist += 0.05f;
            
            shape.setColor(new Color(0.0f, 0.0f, (1 / dist < 1 ? 1 / dist : 1), 1.0f));
            shape.rect(x, (int)(HEIGHT / 2 - HEIGHT / 2 / dist), 1, (int)(HEIGHT / dist));
        }
        
        // minimap
        for(int y = 0; y < map.length; y++) {
            for(int x = 0; x < map[0].length; x++) {
                if(map[y][x] == '.')
                    shape.setColor(0.0f, 0.0f, 0.0f, 1.0f);
                else
                    shape.setColor(1.0f, 1.0f, 1.0f, 1.0f);
                shape.rect(x, y, 1, 1);
            }
        }
        shape.setColor(1.0f, 0.0f, 0.0f, 1.0f);
        shape.ellipse(playerX - 0.5f, playerY - 0.5f, 1, 1);
        
        shape.setColor(1.0f, 1.0f, 1.0f, 1.0f);
        shape.ellipse(WIDTH / 2 - 0.5f, HEIGHT / 2 - 0.5f, 1, 1);
        
        shape.end();
    }
}
